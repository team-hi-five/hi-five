pipeline {
    agent any

    environment {
        // 이미지 이름 및 태그 설정
        BACKEND_IMAGE  = 'project_java_service'
        BACKEND_TAG    = 'latest'
        FRONTEND_IMAGE = 'nginx'
        FRONTEND_TAG   = 'latest'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Check Path') {
            steps {
                script {
                    sh 'pwd'
                    sh 'ls -al'
                    sh 'ls -al ..'
                    sh 'ls -al ../docker'
                }
            }
        }

        // 백엔드: application.properties 파일 추가 후 빌드
        stage('Prepare Backend Properties') {
            steps {
                dir('backend') {
                    withCredentials([file(credentialsId: 'app-properties', variable: 'APP_PROPS')]) {
                        sh 'mkdir -p src/main/resources'
                        sh 'cp $APP_PROPS src/main/resources/application.properties'
                    }
                }
            }
        }

        stage('Build & Test Backend') {
            steps {
                dir('backend') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build Docker Image (Backend)') {
            steps {
                dir('backend') {
                    sh """
                        docker build \
                        --build-arg JAR_FILE=build/libs/backend-0.0.1-SNAPSHOT.jar \
                        -t ${env.BACKEND_IMAGE}:${env.BACKEND_TAG} \
                        .
                    """
                }
            }
        }

        // 프론트엔드: .env 파일 추가 후 빌드
        stage('Prepare Frontend .env') {
            steps {
                dir('frontend/h5') {
                    withCredentials([file(credentialsId: 'frontend-env', variable: 'FRONT_ENV')]) {
                        sh 'cp $FRONT_ENV .env'
                    }
                }
            }
        }

        stage('Build & Test Frontend') {
            steps {
                dir('frontend/h5') {
                    script {
                        docker.image('node:22').inside {
                            sh 'node -v'  // Docker 컨테이너 내부에서 실행
                            sh 'npm install'
                            sh 'npm run build'
                        }
                    }
                }
            }
        }

        stage('Build Docker Image (Frontend)') {
            steps {
                dir('frontend/h5') {
                    // 빌드 산출물이 정상적으로 생성되었는지 확인 (디버깅용)
                    sh 'ls -la'
                    sh "docker build -t ${FRONTEND_IMAGE}:${FRONTEND_TAG} ."
                }
            }
        }

        stage('Docker Image Cleanup') {
            steps {
                sh 'docker image prune -f'
            }
        }

        stage('Redeploy Backend & Frontend') {
            steps {
                script {
                    // 1) 백엔드(java_service) 컨테이너만 중지/삭제
                    sh 'docker-compose stop java_service'
                    sh 'docker-compose rm -f java_service'
                    
                    // 2) 프론트엔드(nginx) 컨테이너만 중지/삭제
                    sh 'docker-compose stop nginx'
                    sh 'docker-compose rm -f nginx'
                    
                    // 3) 새 이미지로 백엔드 재시작
                    sh 'docker-compose up -d java_service'
                    
                    // 4) 새 이미지로 프론트 재시작
                    sh 'docker-compose up -d nginx'
                }
            }
        }

    }

    post {
        always {
            cleanWs()
        }
    }
}
