pipeline {
    agent any

    environment {
        // 이미지 이름 및 태그 설정
        BACKEND_IMAGE  = 'project_java_service'
        BACKEND_TAG    = 'latest'
        FRONTEND_IMAGE = 'nginx'
        FRONTEND_TAG   = 'latest'
    }

    tools {nodejs "nodejs-15.6.0"}

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // 백엔드: application.properties 파일 추가 후 빌드
        stage('Prepare Backend Properties') {
            steps {
                dir('backend') {
                    withCredentials([file(credentialsId: 'app-properties', variable: 'APP_PROPS')]) {
                        sh 'mkdir -p src/main/resources'
                        sh 'cp $APP_PROPS src/main/resources/application.properties'
                    }
                }
            }
        }

        stage('Build & Test Backend') {
            steps {
                dir('backend') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'
                }
            }
        }

        stage('Docker Build Backend') {
            steps {
                dir('backend') {
                    sh "docker build -t ${BACKEND_IMAGE}:${BACKEND_TAG} ."
                }
            }
        }

        // 프론트엔드: .env 파일 추가 후 빌드
        stage('Prepare Frontend .env') {
            steps {
                dir('frontend/h5') {
                    withCredentials([file(credentialsId: 'frontend-env', variable: 'FRONT_ENV')]) {
                        sh 'cp $FRONT_ENV .env'
                    }
                }
            }
        }

        stage('Build & Test Frontend') {
            steps {
                dir('frontend/h5') {
                    script {
                        docker.image('node:14').inside {
                            sh 'npm install'
                            sh 'npm run build'
                        }
                    }
                }
            }
        }

        stage('Docker Build Frontend') {
            steps {
                dir('frontend/h5') {
                    sh "docker build -t ${FRONTEND_IMAGE}:${FRONTEND_TAG} ."
                }
            }
        }

        stage('Docker Image Cleanup') {
            steps {
                sh 'docker image prune -f'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
