pipeline {
    agent any

    environment {
        BACKEND_IMAGE   = "java_service"
        BACKEND_TAG     = "latest"
        FRONTEND_IMAGE  = "nginx"
        FRONTEND_TAG    = "latest"

        DOCKER_COMPOSE_FILE = "project/docker-compose.yml"
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    withCredentials([file(credentialsId: 'app-properties', variable: 'APP_PROPS')]) {
                        sh 'mkdir -p src/main/resources'
                        sh 'cp $APP_PROPS src/main/resources/application.properties'
                    }

                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'

                    sh """
                        docker build --rm \
                          --build-arg JAR_FILE=build/libs/backend-0.0.1-SNAPSHOT.jar \
                          -t ${env.BACKEND_IMAGE}:${env.BUILD_NUMBER} .
                    """

                    sh "docker tag ${env.BACKEND_IMAGE}:${env.BUILD_NUMBER} ${env.BACKEND_IMAGE}:latest"
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend/h5') {
                    withCredentials([file(credentialsId: 'frontend-env', variable: 'FRONT_ENV')]) {
                        sh "cp \"$FRONT_ENV\" .env"
                    }

                    // 빌드 전 현재 디렉토리 확인
                    sh 'pwd'
                    sh 'ls -al'

                    // Docker 컨테이너 내부에서 npm 실행
                    sh 'docker run --rm -v ${WORKSPACE}/frontend/h5:/app -w /app node:22 sh -c "npm install && npm run build"'

                    sh """
                        docker build --rm \
                        -t ${env.FRONTEND_IMAGE}:${env.BUILD_NUMBER} .
                    """

                    sh "docker tag ${env.FRONTEND_IMAGE}:${env.BUILD_NUMBER} ${env.FRONTEND_IMAGE}:latest"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "기존 컨테이너를 정리합니다."
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} down"

                    echo "새 이미지로 컨테이너를 실행합니다."
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} up -d --build"
                }
            }
        }
    }

    post {
        success {
            echo "배포가 성공적으로 완료되었습니다!"
        }
        failure {
            echo "배포 중 오류가 발생하였습니다."
        }
        always {
            cleanWs()
        }
    }
}
