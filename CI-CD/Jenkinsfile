pipeline {
    agent any

    environment {
        // 도커 이미지 이름 및 태그 (필요에 따라 변경)
        BACKEND_IMAGE   = "java_service"
        BACKEND_TAG     = "latest"
        FRONTEND_IMAGE  = "nginx"
        FRONTEND_TAG    = "latest"
        
        // 프로덕션 배포에 사용할 docker-compose 파일 경로 (예: Git 루트에 deploy/ 폴더에 작성)
        DOCKER_COMPOSE_FILE = "project/docker-compose.yml"
        
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    // Jenkins credentials로 관리되는 application.properties 파일을 복사
                    withCredentials([file(credentialsId: 'app-properties', variable: 'APP_PROPS')]) {
                        sh 'mkdir -p src/main/resources'
                        sh 'cp $APP_PROPS src/main/resources/application.properties'
                    }

                    sh 'chmod +x gradlew'
                    
                    // Gradle을 이용해 백엔드 빌드 (JAR 파일이 build/libs/ 하위에 생성됨)
                    sh './gradlew clean build'
                    
                    // Dockerfile에서 ARG JAR_FILE 을 사용하여 빌드된 JAR 파일을 이미지에 포함
                    sh """
                       docker build \
                         --build-arg JAR_FILE=build/libs/backend-0.0.1-SNAPSHOT.jar \
                         -t ${env.BACKEND_IMAGE}:${env.BACKEND_TAG} .
                    """
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend/h5') {
                    // Jenkins credentials로 관리되는 .env 파일을 복사합니다.
                    withCredentials([file(credentialsId: 'frontend-env', variable: 'FRONT_ENV')]) {
                        sh "cp \"$FRONT_ENV\" .env"
                    }
                    
                    // script 블록 내부에서 docker 명령어를 실행합니다.
                    script {
                        docker.image('node:22').inside {
                            sh 'npm install'
                            sh 'npm run build'
                        }
                    }
                    
                    // Dockerfile이 빌드 컨텍스트 루트에 위치하며, dist/ 폴더를 Nginx 이미지에 복사
                    sh "docker build -t ${env.FRONTEND_IMAGE}:${env.FRONTEND_TAG} ."
                }
            }
        }


        stage('Deploy') {
            steps {
                script {
                    echo "기존 java_service 및 nginx 컨테이너를 중지 및 제거합니다."
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} stop java_service nginx || true"
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} rm -f java_service nginx || true"
                    
                    echo "새 이미지로 컨테이너를 기동합니다."
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} up -d java_service nginx"
                }
            }
        }

    }

    post {
        success {
            echo "배포가 성공적으로 완료되었습니다!"
        }
        failure {
            echo "배포 중 오류가 발생하였습니다."
        }
        always {
            // 필요시 워크스페이스 정리 (cleanWs() 사용)
            cleanWs()
        }
    }
}
